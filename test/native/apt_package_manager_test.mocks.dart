// Mocks generated by Mockito 5.4.4 from annotations
// in xpm/test/native/apt_package_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:xpm/os/run.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [Run].
///
/// See the documentation for Mockito's code generation for more information.
class MockRun extends _i1.Mock implements _i2.Run {
  MockRun() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.ProcessResult> simple(
    String? script,
    List<String>? args, {
    void Function(String)? onProgress,
    bool? quiet = false,
    bool? sudo = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #simple,
          [
            script,
            args,
          ],
          {
            #onProgress: onProgress,
            #quiet: quiet,
            #sudo: sudo,
          },
        ),
        returnValue: _i3.Future<_i4.ProcessResult>.value(
            _i5.dummyValue<_i4.ProcessResult>(
          this,
          Invocation.method(
            #simple,
            [
              script,
              args,
            ],
            {
              #onProgress: onProgress,
              #quiet: quiet,
              #sudo: sudo,
            },
          ),
        )),
      ) as _i3.Future<_i4.ProcessResult>);

  @override
  _i3.Future<bool> writeToFile(
    String? filePath,
    String? text, {
    dynamic sudo = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeToFile,
          [
            filePath,
            text,
          ],
          {#sudo: sudo},
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> touch(
    String? filePath, {
    dynamic sudo = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #touch,
          [filePath],
          {#sudo: sudo},
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> asExec(
    String? filePath, {
    bool? sudo = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asExec,
          [filePath],
          {#sudo: sudo},
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> delete(
    String? filePath, {
    dynamic sudo = false,
    dynamic recursive = false,
    dynamic force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [filePath],
          {
            #sudo: sudo,
            #recursive: recursive,
            #force: force,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> move(
    String? $oldPath,
    String? $newPath, {
    dynamic sudo = false,
    dynamic force = false,
    dynamic recursive = false,
    dynamic preserve = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #move,
          [
            $oldPath,
            $newPath,
          ],
          {
            #sudo: sudo,
            #force: force,
            #recursive: recursive,
            #preserve: preserve,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> copy(
    String? oldPath,
    String? newPath, {
    dynamic sudo = false,
    dynamic recursive = false,
    dynamic force = false,
    dynamic preserve = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copy,
          [
            oldPath,
            newPath,
          ],
          {
            #sudo: sudo,
            #recursive: recursive,
            #force: force,
            #preserve: preserve,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> exists(
    String? filePath, {
    dynamic sudo = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #exists,
          [filePath],
          {#sudo: sudo},
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
